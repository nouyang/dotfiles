set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'
Plugin 'sentientmachine/Pretty-Vim-Python'
Plugin 'scrooloose/nerdcommenter'
Plugin 'maralla/completor.vim'
Plugin 'lervag/vimtex'
" shortcuts: https://github.com/lervag/vimtex
Plugin 'Vimjas/vim-python-pep8-indent'
Plugin '907th/vim-auto-save'
Plugin 'skywind3000/asyncrun.vim'
Plugin 'scrooloose/nerdtree'
Plugin 'nikvdp/ejs-syntax'

" The following are examples of different formats supported.
" Keep Plugin commands between vundle#begin/end.
" plugin on GitHub repo
" Plugin 'lervag/vimtex'

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line

nmap , :
command WQ wq
command Wq wq
command W w
command Q q


syntax on
filetype indent plugin on

set tabstop=4
set expandtab
set shiftwidth=4
set softtabstop=4
set autoindent

"colorscheme desert
colorscheme molokai
highlight Comment cterm=bold
"highlight Comment cterm=bold

let mapleader=","
set nu
set mouse=a

nnoremap ,o :!pdflatex %<CR>

set wrap
set textwidth=100


inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
inoremap <expr> <cr> pumvisible() ? "\<C-y>\<cr>" : "\<cr>"


" make a statusline
hi StatusLine ctermbg=red ctermfg=black
set statusline=%t[%{strlen(&fenc)?&fenc:'none'},%{&ff}]%h%m%r%y%=%c,%l/%L\ %P
set laststatus=2 "put statusline two lines up

" let the tab at the top reflect the current file being edited
let &titlestring = @%
set title

imap jk <Esc>


"set list
" making it possible to see cursor when highlighting matching
hi MatchParen cterm=bold ctermbg=none ctermfg=magenta

" NOTE show whitespace with :set list

" create abbreviations for math. when you type the space, vim will expand


" automatically create equation environment. Used in inesrt mode
autocmd FileType tex    map!;b <ESC>bywi\begin{<ESC>ea}<CR>\end{}<ESC>PO
autocmd FileType tex    map!;m \begin{align}<Return>\end{align}<ESC>O 
autocmd FileType tex    map!;a \begin{answer}<Return>\end{answer}<ESC>O 



let g:auto_save_events = ["InsertLeave", "TextChanged", "TextChangedI", "CursorHold"]
" AutoSave is disabled by default, run :AutoSaveToggle to enable/disable it.
set updatetime=750
" \ll in normal mode to get   
" \lv
" vim --servername vim test.tex
" ci} {asdf}
" cit <h2></h2> 
" dac \boldface\mu ->  \mu (command)
" cse  change surrounding environment


" Bind F5 to save file if modified and execute python script in a buffer.
"nnoremap <silent> <F5> :call SaveAndExecutePython()<CR>
"vnoremap <silent> <F5> :<C-u>call SaveAndExecutePython()<CR>
"nnoremap ,p :w<CR>:!clear;python %<CR> 
nnoremap ,p :call <SID>compile_and_run()<CR>
nnoremap ,e :!python %<cr>
" botright vertical pedit.



augroup SPACEVIM_ASYNCRUN
    autocmd!
    " Automatically open the quickfix window
    autocmd User AsyncRunStart call asyncrun#quickfix_toggle(15, 1)
augroup END

function! s:compile_and_run()
	set splitright
    exec 'w'
    if &filetype == 'c'
        exec "AsyncRun! gcc % -o %<; time ./%<"
    elseif &filetype == 'cpp'
       exec "AsyncRun! g++ -std=c++11 % -o %<; time ./%<"
    elseif &filetype == 'java'
       exec "AsyncRun! javac %; time java %<"
    elseif &filetype == 'sh'
       exec "AsyncRun! time bash %"
    elseif &filetype == 'python'
       exec "AsyncRun! time python %"
    endif
    " ctrl-w H to move split to right
    "autocmd FileType qf wincmd L "move quickfix window to right
    "http://liuchengxu.org/posts/use-vim-as-a-python-ide/
endfunction

au FileType qf wincmd H
au FileType qf :vertical resize 50
au FileType qf wincmd R


map <Leader>n :NERDTreeToggle<CR>

set iskeyword-=_
